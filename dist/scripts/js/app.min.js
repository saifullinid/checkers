/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/js/GameData.js":
/*!************************************!*\
  !*** ./src/scripts/js/GameData.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameData\": () => (/* binding */ GameData)\n/* harmony export */ });\nclass GameData {\r\n\r\n    constructor(gameData) {\r\n        this.winner = gameData['winner']\r\n        this.checkWinner()\r\n        this.possibleMoves = gameData['possible_moves']\r\n        this.activePlayer = gameData['active_player']\r\n\r\n        this.possibleMovesDOM = []\r\n        this.elements = {}\r\n\r\n        this.filling()\r\n\r\n        console.log('constructor GameData', '\\npossibleMovesDOM',this.possibleMovesDOM, '\\n\\nelements', this.elements)\r\n\r\n    }\r\n\r\n    filling() {\r\n        this.elements = {}\r\n        this.possibleMoves.forEach(move => {\r\n            let checkerCoord = move[0].join()\r\n            let cellCoord = move[1].join()\r\n\r\n            let checkerClass = `.row_${move[0][0]}.column_${move[0][1]}`\r\n            let cellClass = `.cell_row_${move[1][0]}.cell_column_${move[1][1]}`\r\n\r\n            let checker = document.querySelector(checkerClass)\r\n            let cell = document.querySelector(cellClass)\r\n\r\n            let enemyCheckerClass = 0\r\n            let enemyCheckerCoord = 0\r\n            let enemyChecker = 0\r\n            console.log(move[2]);\r\n            if (move[2].length) {\r\n                enemyCheckerClass = `.row_${move[2][0]}.column_${move[2][1]}`\r\n                enemyCheckerCoord = move[2].join()\r\n                enemyChecker = document.querySelector(enemyCheckerClass)\r\n                this.elements[enemyCheckerCoord] = enemyChecker\r\n                console.log('!!! in if !!!');\r\n            }\r\n\r\n            this.possibleMovesDOM.push([checker, cell, enemyChecker])\r\n\r\n            this.elements[checkerCoord] = checker\r\n            this.elements[cellCoord] = cell\r\n        })\r\n    }\r\n\r\n    checkWinner() {\r\n        console.log('checking WINNER');\r\n        if (this.winner == 'black') {\r\n            console.log('Winner BLACK player')\r\n        } else if (this.winner == 'white') {\r\n            console.log('Winner WHITE player')\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://checkers/./src/scripts/js/GameData.js?");

/***/ }),

/***/ "./src/scripts/js/Service.js":
/*!***********************************!*\
  !*** ./src/scripts/js/Service.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Service\": () => (/* binding */ Service)\n/* harmony export */ });\nclass Service {\r\n    constructor(gameData) {\r\n        this.possibleMoves = gameData.possibleMoves\r\n        this.activePlayer = gameData.activePlayer\r\n\r\n        this.possibleMovesDOM = gameData.possibleMovesDOM\r\n        this.elements = gameData.elements\r\n    }\r\n\r\n    getActiveCheckers() {\r\n        let checkersSet = new Set()\r\n        this.possibleMovesDOM.forEach(move => {\r\n            checkersSet.add(move[0])\r\n        })\r\n        console.log('possibleMovesDOM', this.possibleMovesDOM);\r\n        return Array.from(checkersSet)\r\n    }\r\n\r\n    addRemoveActiveCheckersClass(checker, activeCheckers) {\r\n        checker.classList.toggle('active_checker')\r\n\r\n        activeCheckers.forEach(el => {\r\n            if (el != checker) {\r\n                el.classList.remove('active_checker')\r\n            }\r\n        })\r\n    }\r\n\r\n    getActiveCells(checker) {\r\n        let isActiveClassFound = checker.classList.value.includes('active_checker') ? true : false\r\n        let activeCellsArr = []\r\n        let passiveCellsArr = []\r\n        this.possibleMovesDOM.forEach(move => {\r\n            if (move[0] == checker & isActiveClassFound) {\r\n                activeCellsArr.push(move[1])\r\n            } else {\r\n                passiveCellsArr.push(move[1])\r\n            }\r\n        })\r\n        passiveCellsArr = passiveCellsArr.filter(cell => !activeCellsArr.includes(cell))\r\n        return [activeCellsArr, passiveCellsArr]\r\n    }\r\n\r\n    addCellsActiveClass(activeCells) {\r\n        activeCells.forEach(el => {\r\n            el.classList.add('active_cell')\r\n        })\r\n    }\r\n\r\n    removeCellsActiveClass(passiveCells) {\r\n        passiveCells.forEach(el => {\r\n            el.classList.remove('active_cell')\r\n        })\r\n    }\r\n\r\n    getEnemyChecker(checker, cell) {\r\n        let enemyChecker = 0\r\n        this.possibleMovesDOM.forEach(move => {\r\n            if (move[0] == checker & move[1] == cell) {\r\n                console.log('move\\n', move);\r\n                console.log('!!! in getEnemyChecker !!!\\n');\r\n                console.log('enemyChecker', move[2]);\r\n                enemyChecker = move[2]\r\n            }\r\n        })\r\n        return enemyChecker\r\n    }\r\n\r\n    getMoveAndElements(checker, cell) {\r\n        let enemyChecker = this.getEnemyChecker(checker, cell)\r\n        let enemyCoord = []\r\n        let checkerCoord = []\r\n        let cellCoord = []\r\n\r\n        for (let key in this.elements) {\r\n            let element = this.elements[key]\r\n            switch(element) {\r\n                case checker:\r\n                    checkerCoord = key.split(',').map(str => parseInt(str, 10))\r\n                    break\r\n                case cell:\r\n                    cellCoord = key.split(',').map(str => parseInt(str, 10))\r\n                    break\r\n                case enemyChecker:\r\n                    enemyCoord = key.split(',').map(str => parseInt(str, 10))\r\n                    break\r\n            }\r\n        }\r\n        return [[checkerCoord, cellCoord, enemyCoord], [checker, cell, enemyChecker]]\r\n    }\r\n\r\n    makeMove(move, elements) {\r\n        elements[0].style.cssText = `--row:${move[1][0]}; --column:${move[1][1]};`\r\n\r\n        let removeClass = [`row_${move[0][0]}`, `column_${move[0][1]}`]\r\n        let addClass = [`row_${move[1][0]}`, `column_${move[1][1]}`]\r\n        elements[0].classList.remove(removeClass[0], removeClass[1])\r\n        elements[0].classList.add(addClass[0], addClass[1])\r\n\r\n        if (this.activePlayer == 'black' & move[1][0] == 7) {\r\n            elements[0].classList.add('queen')\r\n        } else if (this.activePlayer == 'white' & move[1][0] == 0) {\r\n            elements[0].classList.add('queen')\r\n        }\r\n\r\n        if (elements[2]) {\r\n            elements[2].remove()\r\n        }\r\n    }\r\n\r\n    cloneElements() {\r\n        for (let key in this.elements) {\r\n            if (this.elements[key] == null) {\r\n                continue\r\n            } else {\r\n                this.elements[key].classList.remove('active_checker')\r\n                this.elements[key].classList.remove('hovered')\r\n                this.elements[key].classList.remove('active_cell')\r\n                let clone = this.elements[key].cloneNode(true)\r\n                this.elements[key].replaceWith(clone)\r\n            }\r\n        }\r\n    }\r\n\r\n    turnField() {\r\n        let field = document.querySelector('.field')\r\n        if (this.activePlayer == 'white') {\r\n            field.classList.remove('turned')\r\n        } else {\r\n            field.classList.add('turned')\r\n        }\r\n    }\r\n\r\n    servicePromiseOne = serviceThis => {\r\n        return new Promise(function(resolve, reject) {\r\n            serviceThis.turnField()\r\n            let activeCheckers = serviceThis.getActiveCheckers()\r\n            activeCheckers.forEach(el => {\r\n                // console.log('servicePromiseOne\\n', activeCheckers, '\\n', el);\r\n                el.classList.add('hovered')\r\n            })\r\n\r\n            activeCheckers.forEach(checker => {\r\n                checker.addEventListener('click', () => {\r\n                    serviceThis.addRemoveActiveCheckersClass(checker, activeCheckers)\r\n\r\n                    let activeCells\r\n                    let passiveCells\r\n                    [activeCells, passiveCells] = serviceThis.getActiveCells(checker)\r\n                    serviceThis.addCellsActiveClass(activeCells)\r\n                    serviceThis.removeCellsActiveClass(passiveCells)\r\n\r\n                    resolve([activeCells, checker, serviceThis])\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    servicePromiseTwo = function(activeCells, checker, serviceThis) {\r\n        return new Promise(function(resolve, reject) {\r\n            activeCells.forEach(cell => {\r\n                cell.addEventListener('click', () => {\r\n                    let elements\r\n                    let move\r\n                    [move, elements] = serviceThis.getMoveAndElements(checker, cell)\r\n                    serviceThis.makeMove(move, elements)\r\n\r\n                    serviceThis.cloneElements()\r\n                    // console.log('!!! in addEventOnCells !!!\\n', move);\r\n                    resolve(move)\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    async servicePromise(obj) {\r\n        let temp = await this.servicePromiseOne(obj)\r\n        let move = await this.servicePromiseTwo(temp[0], temp[1], temp[2])\r\n        return move\r\n    }\r\n}\n\n//# sourceURL=webpack://checkers/./src/scripts/js/Service.js?");

/***/ }),

/***/ "./src/scripts/js/request.js":
/*!***********************************!*\
  !*** ./src/scripts/js/request.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"delay\": () => (/* binding */ delay)\n/* harmony export */ });\nconst delay = options => {\r\n  return new Promise(function (resolve, reject) {\r\n    var xhr = new XMLHttpRequest()\r\n    xhr.open(options.method, options.url)\r\n    xhr.responseType = 'json'\r\n    xhr.onload = function() {\r\n    if (xhr.status >= 200 && xhr.status <= 300) {\r\n        resolve(xhr.response)\r\n    } else {\r\n      reject({\r\n      status: xhr.status,\r\n      statusText: xhr.statusText\r\n      })\r\n    }\r\n    }\r\n    xhr.onerror = function () {\r\n    reject({\r\n      status: xhr.status,\r\n      statusText: xhr.statusText\r\n    })\r\n    }\r\n    if (options.headers) {\r\n      Object.keys(options.headers).forEach(function (key) {\r\n        xhr.setRequestHeader(key, options.headers[key])\r\n      })\r\n    }\r\n    var params = JSON.stringify(options.params)\r\n    xhr.send(params)\r\n  })\r\n}\r\n\n\n//# sourceURL=webpack://checkers/./src/scripts/js/request.js?");

/***/ }),

/***/ "./src/scripts/js/scripts.js":
/*!***********************************!*\
  !*** ./src/scripts/js/scripts.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GameData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameData.js */ \"./src/scripts/js/GameData.js\");\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./request.js */ \"./src/scripts/js/request.js\");\n/* harmony import */ var _Service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Service.js */ \"./src/scripts/js/Service.js\");\n\r\n\r\n\r\n\r\n\r\nif (window.location.href.indexOf('game') != -1) {\r\n    let btn_start_game = document.querySelector('.start_button')\r\n    btn_start_game.addEventListener('click', start_game)\r\n    function start_game() {\r\n        btn_start_game.classList.add('start_button-hidden');\r\n\r\n        (async function loop() {\r\n            let move = ''\r\n            let method = 'GET';\r\n            let winner = ''\r\n\r\n            while (!winner) {\r\n                let options = {\r\n                    method: method,\r\n                    url: 'http://127.0.0.1:8000/start',\r\n                    headers: '',\r\n                    responseType: 'json',\r\n                    params: move,\r\n                }\r\n                let inputGameData = await (0,_request_js__WEBPACK_IMPORTED_MODULE_1__.delay)(options)\r\n                let gameData = new _GameData_js__WEBPACK_IMPORTED_MODULE_0__.GameData(inputGameData)\r\n                let service = new _Service_js__WEBPACK_IMPORTED_MODULE_2__.Service(gameData)\r\n\r\n                move = await service.servicePromise(service)\r\n                winner = gameData.winner\r\n                method = 'POST'\r\n            }\r\n            console.log(winner);\r\n        })()\r\n    }\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://checkers/./src/scripts/js/scripts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scripts/js/scripts.js");
/******/ 	
/******/ })()
;